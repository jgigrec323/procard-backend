generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique @db.VarChar(255)
  password  String
  phone     String?   @db.VarChar(20)
  role      String    @default("user")
  cards     Card[]    @relation("UserToCard") // One-to-many relationship
  orders    Order[]   @relation("UserToOrder") // One-to-many relationship
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([email])
}

model Card {
  id             String       @id @default(uuid())
  type           String
  status         String
  activationDate DateTime?
  linkedUserId   String
  linkedUser     User         @relation("UserToCard", fields: [linkedUserId], references: [id])
  uniqueURL      String       @unique
  content        CardContent?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([uniqueURL])
  @@index([linkedUserId])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  user            User        @relation("UserToOrder", fields: [userId], references: [id], onDelete: Cascade)
  phone           String      @db.VarChar(20) // Phone field for contact details
  shippingAddress String?
  orderItems      OrderItem[] @relation("OrderToOrderItem") // One-to-many relationship with OrderItem
  isPaid          Boolean     @default(false) // Track payment status
  status          OrderStatus
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation("OrderToOrderItem", fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation("ProductToOrderItem", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1) // Quantity of the product
  price     Decimal // Price of the product at the time of purchase
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  quantity    Int
  description String
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  colorId     String
  color       Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  orderItems  OrderItem[] @relation("ProductToOrderItem") // One-to-many relationship with OrderItem
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([colorId])
}

model CardContent {
  id        String   @id @default(uuid())
  cardId    String   @unique
  card      Card     @relation(fields: [cardId], references: [id])
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[] @relation("ColorToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
